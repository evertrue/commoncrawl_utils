// File generated by rpc compiler. Do not edit.

package org.commoncrawl.query;

import java.io.DataInput;
import java.io.DataOutput;
import java.util.BitSet;
import java.io.IOException;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.record.Buffer;
import org.commoncrawl.util.shared.FlexBuffer;
import org.commoncrawl.util.shared.TextBytes;
import org.commoncrawl.util.shared.MurmurHash;
import org.commoncrawl.util.shared.ImmutableBuffer;
import org.commoncrawl.rpc.BinaryProtocol;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.hadoop.conf.Configuration;

// Generated File: SlaveStatus
public class SlaveStatus extends org.commoncrawl.rpc.RPCStruct<SlaveStatus> implements Writable {

	// optimized constructor helper 
	public static SlaveStatus newInstance(Configuration conf) {
		return ReflectionUtils.newInstance(SlaveStatus.class, conf);
	}

	// Writable Implementation
	public void write(DataOutput out) throws IOException {
		this.serialize(out, new BinaryProtocol());
	}

	public void readFields(DataInput in) throws IOException {
		this.deserialize(in, new BinaryProtocol());
	}

	// Field Constants
	public static final int Field_STATE = 1;
	public static final int Field_QUERYSTATUS = 2;
	static final int FieldID_MAX = Field_QUERYSTATUS;

	// Enumerations

	// Enum:State
	public static final class State {
		public static final int INITIALIZING = 1;
		public static final int READY = 2;
		public static final int ERROR = 10;

		public static String toString(int enumValue) {
			switch (enumValue) {
			case 1:
				return "INITIALIZING";
			case 2:
				return "READY";
			case 10:
				return "ERROR";
			default:
				return "";
			}
		}
	}

	// Field Declarations
	private BitSet __validFields = new BitSet(FieldID_MAX + 1);

	private int state;
	private java.util.ArrayList<org.commoncrawl.query.QueryStatus> queryStatus = new java.util.ArrayList<org.commoncrawl.query.QueryStatus>();

	// Default Constructor
	public SlaveStatus() {
	}

	// Accessors

	public final boolean isFieldDirty(int fieldId) {
		return __validFields.get(fieldId);
	}

	public final SlaveStatus setFieldDirty(int fieldId) {
		__validFields.set(fieldId);
		return this;
	}

	public final SlaveStatus setFieldClean(int fieldId) {
		__validFields.clear(fieldId);
		return this;
	}

	public int getState() {
		return state;
	}

	public SlaveStatus setState(int state) {
		__validFields.set(Field_STATE);
		this.state = state;
		return this;
	}

	public java.util.ArrayList<org.commoncrawl.query.QueryStatus> getQueryStatus() {
		return queryStatus;
	}

	public SlaveStatus setQueryStatus(java.util.ArrayList<org.commoncrawl.query.QueryStatus> queryStatus) {
		__validFields.set(Field_QUERYSTATUS);
		this.queryStatus = queryStatus;
		return this;
	}

	// Object Dirty support 

	public final boolean isObjectDirty() {
		boolean isDirty = !__validFields.isEmpty();
		if (!isDirty) {
			if (!isDirty) {
				isDirty = queryStatus.size() != 0;
			}
		}
		return isDirty;
	}

	// serialize implementation 
	public final void serialize(DataOutput output, BinaryProtocol encoder) throws java.io.IOException {
		encoder.beginFields(output);
		// serialize field:state
		if (__validFields.get(Field_STATE)) {
			encoder.beginField(output, "state", Field_STATE);
			encoder.writeInt(output, state);
		}
		// serialize field:queryStatus
		if (queryStatus.size() != 0) {
			__validFields.set(Field_QUERYSTATUS);
			encoder.beginField(output, "queryStatus", Field_QUERYSTATUS);
			{
				int len1 = queryStatus.size();
				encoder.writeInt(output, len1);
				for (int vidx1 = 0; vidx1 < len1; vidx1++) {
					org.commoncrawl.query.QueryStatus e1 = queryStatus.get(vidx1);
					e1.serialize(output, encoder);
				}
			}
		} else {
			__validFields.clear(Field_QUERYSTATUS);
		}
		encoder.endFields(output);
	}

	// deserialize implementation 
	public final void deserialize(DataInput input, BinaryProtocol decoder) throws java.io.IOException {
		// clear existing data first  
		clear();

		// reset protocol object to unknown field id enconding mode (for compatibility)
		decoder.pushFieldIdEncodingMode(BinaryProtocol.FIELD_ID_ENCODING_MODE_UNKNOWN);
		// keep reading fields until terminator (-1) is located 
		int fieldId;
		while ((fieldId = decoder.readFieldId(input)) != -1) {
			switch (fieldId) {
			case Field_STATE: {
				__validFields.set(Field_STATE);
				state = decoder.readInt(input);
			}
				break;
			case Field_QUERYSTATUS: {
				__validFields.set(Field_QUERYSTATUS);
				{
					int itemCount1 = decoder.readInt(input);
					queryStatus = new java.util.ArrayList<org.commoncrawl.query.QueryStatus>();
					for (int i1 = 0; i1 < itemCount1; ++i1) {
						org.commoncrawl.query.QueryStatus e1;
						e1 = new org.commoncrawl.query.QueryStatus();
						e1.deserialize(input, decoder);
						queryStatus.add(e1);
					}
				}
			}
				break;
			}
		}
		// pop extra encoding mode off of stack 
		decoder.popFieldIdEncodingMode();
	}

	// clear implementation 
	public final void clear() {
		__validFields.clear();
		state = 0;
		queryStatus.clear();
	}

	// equals implementation 
	public final boolean equals(final Object peer_) {
		if (!(peer_ instanceof SlaveStatus)) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		SlaveStatus peer = (SlaveStatus) peer_;
		boolean ret = __validFields.equals(peer.__validFields);
		if (!ret)
			return ret;
		if (__validFields.get(Field_STATE)) {
			ret = (state == peer.state);
			if (!ret)
				return ret;
		}
		if (queryStatus.size() != 0) {
			ret = queryStatus.equals(peer.queryStatus);
			if (!ret)
				return ret;
		}
		return ret;
	}

	// clone implementation 
	@SuppressWarnings("unchecked")
	public final Object clone() throws CloneNotSupportedException {
		SlaveStatus other = new SlaveStatus();
		other.__validFields.or(this.__validFields);
		if (__validFields.get(Field_STATE)) {
			other.state = this.state;
		}
		{
			//Deep Copy Vector
			other.queryStatus = new java.util.ArrayList<org.commoncrawl.query.QueryStatus>();
			int len0 = this.queryStatus.size();
			for (int vidx0 = 0; vidx0 < len0; vidx0++) {
				org.commoncrawl.query.QueryStatus src0 = this.queryStatus.get(vidx0);
				org.commoncrawl.query.QueryStatus tgt0;
				tgt0 = (org.commoncrawl.query.QueryStatus) src0.clone();
				other.queryStatus.add(tgt0);
			}
		}
		return other;
	}

	// merge implementation 
	@SuppressWarnings("unchecked")
	public final void merge(SlaveStatus peer) throws CloneNotSupportedException {
		__validFields.or(peer.__validFields);
		if (peer.__validFields.get(Field_STATE)) {
			this.state = peer.state;
		}
		{
			//Deep Copy Vector
			int len0 = peer.queryStatus.size();
			for (int vidx0 = 0; vidx0 < len0; vidx0++) {
				org.commoncrawl.query.QueryStatus src0 = peer.queryStatus.get(vidx0);
				org.commoncrawl.query.QueryStatus tgt0;
				tgt0 = (org.commoncrawl.query.QueryStatus) src0.clone();
				this.queryStatus.add(tgt0);
			}
		}
	}

	// hashCode implementation 
	public final int hashCode() {
		int result = 1;
		result = MurmurHash.hashInt((int) state, result);
		result = MurmurHash.hashInt(queryStatus.hashCode(), result);
		return result;
	}
}
