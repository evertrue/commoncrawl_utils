// File generated by rpc compiler. Do not edit.

package org.commoncrawl.query;

import java.io.DataInput;
import java.io.DataOutput;
import java.util.BitSet;
import java.io.IOException;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.record.Buffer;
import org.commoncrawl.util.shared.FlexBuffer;
import org.commoncrawl.util.shared.TextBytes;
import org.commoncrawl.util.shared.MurmurHash;
import org.commoncrawl.util.shared.ImmutableBuffer;
import org.commoncrawl.rpc.BinaryProtocol;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.hadoop.conf.Configuration;

// Generated File: TestQueryData
public class TestQueryData extends org.commoncrawl.rpc.RPCStruct<TestQueryData> implements Writable {

	// optimized constructor helper 
	public static TestQueryData newInstance(Configuration conf) {
		return ReflectionUtils.newInstance(TestQueryData.class, conf);
	}

	// Writable Implementation
	public void write(DataOutput out) throws IOException {
		this.serialize(out, new BinaryProtocol());
	}

	public void readFields(DataInput in) throws IOException {
		this.deserialize(in, new BinaryProtocol());
	}

	// Field Constants
	public static final int Field_SOMEDATA = 1;
	static final int FieldID_MAX = Field_SOMEDATA;

	// Field Declarations
	private BitSet __validFields = new BitSet(FieldID_MAX + 1);

	private TextBytes someData = new TextBytes();

	// Default Constructor
	public TestQueryData() {
	}

	// Accessors

	public final boolean isFieldDirty(int fieldId) {
		return __validFields.get(fieldId);
	}

	public final TestQueryData setFieldDirty(int fieldId) {
		__validFields.set(fieldId);
		return this;
	}

	public final TestQueryData setFieldClean(int fieldId) {
		__validFields.clear(fieldId);
		return this;
	}

	public TextBytes getSomeDataAsTextBytes() {
		return someData;
	}

	public String getSomeData() {
		return someData.toString();
	}

	public TestQueryData setSomeData(String someData) {
		__validFields.set(Field_SOMEDATA);
		this.someData.set(someData);
		return this;
	}

	// Object Dirty support 

	public final boolean isObjectDirty() {
		boolean isDirty = !__validFields.isEmpty();
		return isDirty;
	}

	// serialize implementation 
	public final void serialize(DataOutput output, BinaryProtocol encoder) throws java.io.IOException {
		encoder.beginFields(output);
		// serialize field:someData
		if (__validFields.get(Field_SOMEDATA)) {
			encoder.beginField(output, "someData", Field_SOMEDATA);
			encoder.writeTextBytes(output, someData);
		}
		encoder.endFields(output);
	}

	// deserialize implementation 
	public final void deserialize(DataInput input, BinaryProtocol decoder) throws java.io.IOException {
		// clear existing data first  
		clear();

		// reset protocol object to unknown field id enconding mode (for compatibility)
		decoder.pushFieldIdEncodingMode(BinaryProtocol.FIELD_ID_ENCODING_MODE_UNKNOWN);
		// keep reading fields until terminator (-1) is located 
		int fieldId;
		while ((fieldId = decoder.readFieldId(input)) != -1) {
			switch (fieldId) {
			case Field_SOMEDATA: {
				__validFields.set(Field_SOMEDATA);
				decoder.readTextBytes(input, someData);
			}
				break;
			}
		}
		// pop extra encoding mode off of stack 
		decoder.popFieldIdEncodingMode();
	}

	// clear implementation 
	public final void clear() {
		__validFields.clear();
		someData.clear();
	}

	// equals implementation 
	public final boolean equals(final Object peer_) {
		if (!(peer_ instanceof TestQueryData)) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		TestQueryData peer = (TestQueryData) peer_;
		boolean ret = __validFields.equals(peer.__validFields);
		if (!ret)
			return ret;
		if (__validFields.get(Field_SOMEDATA)) {
			ret = someData.equals(peer.someData);
			if (!ret)
				return ret;
		}
		return ret;
	}

	// clone implementation 
	@SuppressWarnings("unchecked")
	public final Object clone() throws CloneNotSupportedException {
		TestQueryData other = new TestQueryData();
		other.__validFields.or(this.__validFields);
		if (__validFields.get(Field_SOMEDATA)) {
			other.someData = (TextBytes) this.someData.clone();
		}
		return other;
	}

	// merge implementation 
	@SuppressWarnings("unchecked")
	public final void merge(TestQueryData peer) throws CloneNotSupportedException {
		__validFields.or(peer.__validFields);
		if (peer.__validFields.get(Field_SOMEDATA)) {
			this.someData = (TextBytes) peer.someData.clone();
		}
	}

	// hashCode implementation 
	public final int hashCode() {
		int result = 1;
		result = MurmurHash.hash(someData.getBytes(), someData.getOffset(), someData.getLength(), result);
		return result;
	}
}
