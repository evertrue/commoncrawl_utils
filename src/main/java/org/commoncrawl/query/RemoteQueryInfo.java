// File generated by rpc compiler. Do not edit.

package org.commoncrawl.query;

import java.io.DataInput;
import java.io.DataOutput;
import java.util.BitSet;
import java.io.IOException;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.record.Buffer;
import org.commoncrawl.util.shared.FlexBuffer;
import org.commoncrawl.util.shared.TextBytes;
import org.commoncrawl.util.shared.MurmurHash;
import org.commoncrawl.util.shared.ImmutableBuffer;
import org.commoncrawl.rpc.BinaryProtocol;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.hadoop.conf.Configuration;

// Generated File: RemoteQueryInfo
public class RemoteQueryInfo extends org.commoncrawl.rpc.RPCStruct<RemoteQueryInfo> implements Writable {

	// optimized constructor helper 
	public static RemoteQueryInfo newInstance(Configuration conf) {
		return ReflectionUtils.newInstance(RemoteQueryInfo.class, conf);
	}

	// Writable Implementation
	public void write(DataOutput out) throws IOException {
		this.serialize(out, new BinaryProtocol());
	}

	public void readFields(DataInput in) throws IOException {
		this.deserialize(in, new BinaryProtocol());
	}

	// Field Constants
	public static final int Field_COMMONINFO = 1;
	public static final int Field_QUERYCLASSTYPE = 2;
	public static final int Field_QUERYDATACLASSTYPE = 3;
	public static final int Field_QUERYDATABUFFER = 4;
	public static final int Field_CLIENTQUERYDATA = 5;
	public static final int Field_SHARDID = 6;
	static final int FieldID_MAX = Field_SHARDID;

	// Field Declarations
	private BitSet __validFields = new BitSet(FieldID_MAX + 1);

	private org.commoncrawl.query.QueryCommon commonInfo = new org.commoncrawl.query.QueryCommon();
	private TextBytes queryClassType = new TextBytes();
	private TextBytes queryDataClassType = new TextBytes();
	private FlexBuffer queryDataBuffer = new FlexBuffer();
	private org.commoncrawl.query.ClientQueryInfo clientQueryData = new org.commoncrawl.query.ClientQueryInfo();
	private int shardId;

	// Default Constructor
	public RemoteQueryInfo() {
	}

	// Accessors

	public final boolean isFieldDirty(int fieldId) {
		return __validFields.get(fieldId);
	}

	public final RemoteQueryInfo setFieldDirty(int fieldId) {
		__validFields.set(fieldId);
		return this;
	}

	public final RemoteQueryInfo setFieldClean(int fieldId) {
		__validFields.clear(fieldId);
		return this;
	}

	public org.commoncrawl.query.QueryCommon getCommonInfo() {
		return commonInfo;
	}

	public RemoteQueryInfo setCommonInfo(org.commoncrawl.query.QueryCommon commonInfo) {
		__validFields.set(Field_COMMONINFO);
		this.commonInfo = commonInfo;
		return this;
	}

	public TextBytes getQueryClassTypeAsTextBytes() {
		return queryClassType;
	}

	public String getQueryClassType() {
		return queryClassType.toString();
	}

	public RemoteQueryInfo setQueryClassType(String queryClassType) {
		__validFields.set(Field_QUERYCLASSTYPE);
		this.queryClassType.set(queryClassType);
		return this;
	}

	public TextBytes getQueryDataClassTypeAsTextBytes() {
		return queryDataClassType;
	}

	public String getQueryDataClassType() {
		return queryDataClassType.toString();
	}

	public RemoteQueryInfo setQueryDataClassType(String queryDataClassType) {
		__validFields.set(Field_QUERYDATACLASSTYPE);
		this.queryDataClassType.set(queryDataClassType);
		return this;
	}

	public ImmutableBuffer getQueryDataBuffer() {
		return new ImmutableBuffer(queryDataBuffer);
	}

	public RemoteQueryInfo setQueryDataBuffer(FlexBuffer queryDataBuffer) {
		__validFields.set(Field_QUERYDATABUFFER);
		this.queryDataBuffer = queryDataBuffer;
		return this;
	}

	public RemoteQueryInfo setQueryDataBuffer(Buffer queryDataBuffer, boolean shared) {
		__validFields.set(Field_QUERYDATABUFFER);
		this.queryDataBuffer = new FlexBuffer(queryDataBuffer.get(), 0, queryDataBuffer.getCount(), shared);
		return this;
	}

	public org.commoncrawl.query.ClientQueryInfo getClientQueryData() {
		return clientQueryData;
	}

	public RemoteQueryInfo setClientQueryData(org.commoncrawl.query.ClientQueryInfo clientQueryData) {
		__validFields.set(Field_CLIENTQUERYDATA);
		this.clientQueryData = clientQueryData;
		return this;
	}

	public int getShardId() {
		return shardId;
	}

	public RemoteQueryInfo setShardId(int shardId) {
		__validFields.set(Field_SHARDID);
		this.shardId = shardId;
		return this;
	}

	// Object Dirty support 

	public final boolean isObjectDirty() {
		boolean isDirty = !__validFields.isEmpty();
		if (!isDirty) {
			if (!isDirty) {
				isDirty = commonInfo.isObjectDirty();
			}
			if (!isDirty) {
				isDirty = clientQueryData.isObjectDirty();
			}
		}
		return isDirty;
	}

	// serialize implementation 
	public final void serialize(DataOutput output, BinaryProtocol encoder) throws java.io.IOException {
		encoder.beginFields(output);
		// serialize field:commonInfo
		if (commonInfo.isObjectDirty()) {
			__validFields.set(Field_COMMONINFO);
			encoder.beginField(output, "commonInfo", Field_COMMONINFO);
			commonInfo.serialize(output, encoder);
		} else {
			__validFields.clear(Field_COMMONINFO);
		}
		// serialize field:queryClassType
		if (__validFields.get(Field_QUERYCLASSTYPE)) {
			encoder.beginField(output, "queryClassType", Field_QUERYCLASSTYPE);
			encoder.writeTextBytes(output, queryClassType);
		}
		// serialize field:queryDataClassType
		if (__validFields.get(Field_QUERYDATACLASSTYPE)) {
			encoder.beginField(output, "queryDataClassType", Field_QUERYDATACLASSTYPE);
			encoder.writeTextBytes(output, queryDataClassType);
		}
		// serialize field:queryDataBuffer
		if (__validFields.get(Field_QUERYDATABUFFER)) {
			encoder.beginField(output, "queryDataBuffer", Field_QUERYDATABUFFER);
			encoder.writeFlexBuffer(output, queryDataBuffer);
		}
		// serialize field:clientQueryData
		if (clientQueryData.isObjectDirty()) {
			__validFields.set(Field_CLIENTQUERYDATA);
			encoder.beginField(output, "clientQueryData", Field_CLIENTQUERYDATA);
			clientQueryData.serialize(output, encoder);
		} else {
			__validFields.clear(Field_CLIENTQUERYDATA);
		}
		// serialize field:shardId
		if (__validFields.get(Field_SHARDID)) {
			encoder.beginField(output, "shardId", Field_SHARDID);
			encoder.writeInt(output, shardId);
		}
		encoder.endFields(output);
	}

	// deserialize implementation 
	public final void deserialize(DataInput input, BinaryProtocol decoder) throws java.io.IOException {
		// clear existing data first  
		clear();

		// reset protocol object to unknown field id enconding mode (for compatibility)
		decoder.pushFieldIdEncodingMode(BinaryProtocol.FIELD_ID_ENCODING_MODE_UNKNOWN);
		// keep reading fields until terminator (-1) is located 
		int fieldId;
		while ((fieldId = decoder.readFieldId(input)) != -1) {
			switch (fieldId) {
			case Field_COMMONINFO: {
				__validFields.set(Field_COMMONINFO);
				commonInfo = new org.commoncrawl.query.QueryCommon();
				commonInfo.deserialize(input, decoder);
			}
				break;
			case Field_QUERYCLASSTYPE: {
				__validFields.set(Field_QUERYCLASSTYPE);
				decoder.readTextBytes(input, queryClassType);
			}
				break;
			case Field_QUERYDATACLASSTYPE: {
				__validFields.set(Field_QUERYDATACLASSTYPE);
				decoder.readTextBytes(input, queryDataClassType);
			}
				break;
			case Field_QUERYDATABUFFER: {
				__validFields.set(Field_QUERYDATABUFFER);
				decoder.readFlexBuffer(input, queryDataBuffer);
			}
				break;
			case Field_CLIENTQUERYDATA: {
				__validFields.set(Field_CLIENTQUERYDATA);
				clientQueryData = new org.commoncrawl.query.ClientQueryInfo();
				clientQueryData.deserialize(input, decoder);
			}
				break;
			case Field_SHARDID: {
				__validFields.set(Field_SHARDID);
				shardId = decoder.readInt(input);
			}
				break;
			}
		}
		// pop extra encoding mode off of stack 
		decoder.popFieldIdEncodingMode();
	}

	// clear implementation 
	public final void clear() {
		__validFields.clear();
		commonInfo.clear();
		queryClassType.clear();
		queryDataClassType.clear();
		queryDataBuffer.reset();
		clientQueryData.clear();
		shardId = 0;
	}

	// equals implementation 
	public final boolean equals(final Object peer_) {
		if (!(peer_ instanceof RemoteQueryInfo)) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		RemoteQueryInfo peer = (RemoteQueryInfo) peer_;
		boolean ret = __validFields.equals(peer.__validFields);
		if (!ret)
			return ret;
		if (commonInfo.isObjectDirty()) {
			ret = commonInfo.equals(peer.commonInfo);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_QUERYCLASSTYPE)) {
			ret = queryClassType.equals(peer.queryClassType);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_QUERYDATACLASSTYPE)) {
			ret = queryDataClassType.equals(peer.queryDataClassType);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_QUERYDATABUFFER)) {
			ret = queryDataBuffer.equals(peer.queryDataBuffer);
			if (!ret)
				return ret;
		}
		if (clientQueryData.isObjectDirty()) {
			ret = clientQueryData.equals(peer.clientQueryData);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_SHARDID)) {
			ret = (shardId == peer.shardId);
			if (!ret)
				return ret;
		}
		return ret;
	}

	// clone implementation 
	@SuppressWarnings("unchecked")
	public final Object clone() throws CloneNotSupportedException {
		RemoteQueryInfo other = new RemoteQueryInfo();
		other.__validFields.or(this.__validFields);
		{
			other.commonInfo = (org.commoncrawl.query.QueryCommon) this.commonInfo.clone();
		}
		if (__validFields.get(Field_QUERYCLASSTYPE)) {
			other.queryClassType = (TextBytes) this.queryClassType.clone();
		}
		if (__validFields.get(Field_QUERYDATACLASSTYPE)) {
			other.queryDataClassType = (TextBytes) this.queryDataClassType.clone();
		}
		if (__validFields.get(Field_QUERYDATABUFFER)) {
			other.queryDataBuffer = (FlexBuffer) this.queryDataBuffer.clone();
		}
		{
			other.clientQueryData = (org.commoncrawl.query.ClientQueryInfo) this.clientQueryData.clone();
		}
		if (__validFields.get(Field_SHARDID)) {
			other.shardId = this.shardId;
		}
		return other;
	}

	// merge implementation 
	@SuppressWarnings("unchecked")
	public final void merge(RemoteQueryInfo peer) throws CloneNotSupportedException {
		__validFields.or(peer.__validFields);
		{
			this.commonInfo.merge(peer.commonInfo);
		}
		if (peer.__validFields.get(Field_QUERYCLASSTYPE)) {
			this.queryClassType = (TextBytes) peer.queryClassType.clone();
		}
		if (peer.__validFields.get(Field_QUERYDATACLASSTYPE)) {
			this.queryDataClassType = (TextBytes) peer.queryDataClassType.clone();
		}
		if (peer.__validFields.get(Field_QUERYDATABUFFER)) {
			this.queryDataBuffer = (FlexBuffer) peer.queryDataBuffer.clone();
		}
		{
			this.clientQueryData.merge(peer.clientQueryData);
		}
		if (peer.__validFields.get(Field_SHARDID)) {
			this.shardId = peer.shardId;
		}
	}

	// hashCode implementation 
	public final int hashCode() {
		int result = 1;
		result = MurmurHash.hashInt(commonInfo.hashCode(), result);
		result = MurmurHash.hash(queryClassType.getBytes(), queryClassType.getOffset(), queryClassType.getLength(),
				result);
		result = MurmurHash.hash(queryDataClassType.getBytes(), queryDataClassType.getOffset(),
				queryDataClassType.getLength(), result);
		result = MurmurHash
				.hash(queryDataBuffer.get(), queryDataBuffer.getOffset(), queryDataBuffer.getCount(), result);
		result = MurmurHash.hashInt(clientQueryData.hashCode(), result);
		result = MurmurHash.hashInt((int) shardId, result);
		return result;
	}
}
