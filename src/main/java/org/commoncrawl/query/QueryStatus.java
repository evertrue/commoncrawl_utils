// File generated by rpc compiler. Do not edit.

package org.commoncrawl.query;

import java.io.DataInput;
import java.io.DataOutput;
import java.util.BitSet;
import java.io.IOException;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.record.Buffer;
import org.commoncrawl.util.shared.FlexBuffer;
import org.commoncrawl.util.shared.TextBytes;
import org.commoncrawl.util.shared.MurmurHash;
import org.commoncrawl.util.shared.ImmutableBuffer;
import org.commoncrawl.rpc.BinaryProtocol;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.hadoop.conf.Configuration;

// Generated File: QueryStatus
public class QueryStatus extends org.commoncrawl.rpc.RPCStruct<QueryStatus> implements Writable {

	// optimized constructor helper 
	public static QueryStatus newInstance(Configuration conf) {
		return ReflectionUtils.newInstance(QueryStatus.class, conf);
	}

	// Writable Implementation
	public void write(DataOutput out) throws IOException {
		this.serialize(out, new BinaryProtocol());
	}

	public void readFields(DataInput in) throws IOException {
		this.deserialize(in, new BinaryProtocol());
	}

	// Field Constants
	public static final int Field_QUERYID = 1;
	public static final int Field_SHARDID = 2;
	public static final int Field_ATTEMPTS = 3;
	public static final int Field_LASTATTEMPTTIME = 4;
	public static final int Field_PROGRESS = 5;
	public static final int Field_STATUS = 6;
	public static final int Field_OPTERRORREASON = 7;
	public static final int Field_OPTRESULTCOUNT = 8;
	static final int FieldID_MAX = Field_OPTRESULTCOUNT;

	// Enumerations

	// Enum:Status
	public static final class Status {
		public static final int PENDING = 0;
		public static final int RUNNING = 1;
		public static final int FINISHED = 2;
		public static final int ERROR = 3;
		public static final int CANCELLED = 4;

		public static String toString(int enumValue) {
			switch (enumValue) {
			case 0:
				return "PENDING";
			case 1:
				return "RUNNING";
			case 2:
				return "FINISHED";
			case 3:
				return "ERROR";
			case 4:
				return "CANCELLED";
			default:
				return "";
			}
		}
	}

	// Field Declarations
	private BitSet __validFields = new BitSet(FieldID_MAX + 1);

	private long queryId;
	private int shardId;
	private int attempts;
	private long lastAttemptTime;
	private float progress;
	private int status;
	private TextBytes optErrorReason = new TextBytes();
	private long optResultCount;

	// Default Constructor
	public QueryStatus() {
	}

	// Accessors

	public final boolean isFieldDirty(int fieldId) {
		return __validFields.get(fieldId);
	}

	public final QueryStatus setFieldDirty(int fieldId) {
		__validFields.set(fieldId);
		return this;
	}

	public final QueryStatus setFieldClean(int fieldId) {
		__validFields.clear(fieldId);
		return this;
	}

	public long getQueryId() {
		return queryId;
	}

	public QueryStatus setQueryId(long queryId) {
		__validFields.set(Field_QUERYID);
		this.queryId = queryId;
		return this;
	}

	public int getShardId() {
		return shardId;
	}

	public QueryStatus setShardId(int shardId) {
		__validFields.set(Field_SHARDID);
		this.shardId = shardId;
		return this;
	}

	public int getAttempts() {
		return attempts;
	}

	public QueryStatus setAttempts(int attempts) {
		__validFields.set(Field_ATTEMPTS);
		this.attempts = attempts;
		return this;
	}

	public long getLastAttemptTime() {
		return lastAttemptTime;
	}

	public QueryStatus setLastAttemptTime(long lastAttemptTime) {
		__validFields.set(Field_LASTATTEMPTTIME);
		this.lastAttemptTime = lastAttemptTime;
		return this;
	}

	public float getProgress() {
		return progress;
	}

	public QueryStatus setProgress(float progress) {
		__validFields.set(Field_PROGRESS);
		this.progress = progress;
		return this;
	}

	public int getStatus() {
		return status;
	}

	public QueryStatus setStatus(int status) {
		__validFields.set(Field_STATUS);
		this.status = status;
		return this;
	}

	public TextBytes getOptErrorReasonAsTextBytes() {
		return optErrorReason;
	}

	public String getOptErrorReason() {
		return optErrorReason.toString();
	}

	public QueryStatus setOptErrorReason(String optErrorReason) {
		__validFields.set(Field_OPTERRORREASON);
		this.optErrorReason.set(optErrorReason);
		return this;
	}

	public long getOptResultCount() {
		return optResultCount;
	}

	public QueryStatus setOptResultCount(long optResultCount) {
		__validFields.set(Field_OPTRESULTCOUNT);
		this.optResultCount = optResultCount;
		return this;
	}

	// Object Dirty support 

	public final boolean isObjectDirty() {
		boolean isDirty = !__validFields.isEmpty();
		return isDirty;
	}

	// serialize implementation 
	public final void serialize(DataOutput output, BinaryProtocol encoder) throws java.io.IOException {
		encoder.beginFields(output);
		// serialize field:queryId
		if (__validFields.get(Field_QUERYID)) {
			encoder.beginField(output, "queryId", Field_QUERYID);
			encoder.writeLong(output, queryId);
		}
		// serialize field:shardId
		if (__validFields.get(Field_SHARDID)) {
			encoder.beginField(output, "shardId", Field_SHARDID);
			encoder.writeInt(output, shardId);
		}
		// serialize field:attempts
		if (__validFields.get(Field_ATTEMPTS)) {
			encoder.beginField(output, "attempts", Field_ATTEMPTS);
			encoder.writeInt(output, attempts);
		}
		// serialize field:lastAttemptTime
		if (__validFields.get(Field_LASTATTEMPTTIME)) {
			encoder.beginField(output, "lastAttemptTime", Field_LASTATTEMPTTIME);
			encoder.writeLong(output, lastAttemptTime);
		}
		// serialize field:progress
		if (__validFields.get(Field_PROGRESS)) {
			encoder.beginField(output, "progress", Field_PROGRESS);
			encoder.writeFloat(output, progress);
		}
		// serialize field:status
		if (__validFields.get(Field_STATUS)) {
			encoder.beginField(output, "status", Field_STATUS);
			encoder.writeInt(output, status);
		}
		// serialize field:optErrorReason
		if (__validFields.get(Field_OPTERRORREASON)) {
			encoder.beginField(output, "optErrorReason", Field_OPTERRORREASON);
			encoder.writeTextBytes(output, optErrorReason);
		}
		// serialize field:optResultCount
		if (__validFields.get(Field_OPTRESULTCOUNT)) {
			encoder.beginField(output, "optResultCount", Field_OPTRESULTCOUNT);
			encoder.writeLong(output, optResultCount);
		}
		encoder.endFields(output);
	}

	// deserialize implementation 
	public final void deserialize(DataInput input, BinaryProtocol decoder) throws java.io.IOException {
		// clear existing data first  
		clear();

		// reset protocol object to unknown field id enconding mode (for compatibility)
		decoder.pushFieldIdEncodingMode(BinaryProtocol.FIELD_ID_ENCODING_MODE_UNKNOWN);
		// keep reading fields until terminator (-1) is located 
		int fieldId;
		while ((fieldId = decoder.readFieldId(input)) != -1) {
			switch (fieldId) {
			case Field_QUERYID: {
				__validFields.set(Field_QUERYID);
				queryId = decoder.readLong(input);
			}
				break;
			case Field_SHARDID: {
				__validFields.set(Field_SHARDID);
				shardId = decoder.readInt(input);
			}
				break;
			case Field_ATTEMPTS: {
				__validFields.set(Field_ATTEMPTS);
				attempts = decoder.readInt(input);
			}
				break;
			case Field_LASTATTEMPTTIME: {
				__validFields.set(Field_LASTATTEMPTTIME);
				lastAttemptTime = decoder.readLong(input);
			}
				break;
			case Field_PROGRESS: {
				__validFields.set(Field_PROGRESS);
				progress = decoder.readFloat(input);
			}
				break;
			case Field_STATUS: {
				__validFields.set(Field_STATUS);
				status = decoder.readInt(input);
			}
				break;
			case Field_OPTERRORREASON: {
				__validFields.set(Field_OPTERRORREASON);
				decoder.readTextBytes(input, optErrorReason);
			}
				break;
			case Field_OPTRESULTCOUNT: {
				__validFields.set(Field_OPTRESULTCOUNT);
				optResultCount = decoder.readLong(input);
			}
				break;
			}
		}
		// pop extra encoding mode off of stack 
		decoder.popFieldIdEncodingMode();
	}

	// clear implementation 
	public final void clear() {
		__validFields.clear();
		queryId = 0;
		shardId = 0;
		attempts = 0;
		lastAttemptTime = 0;
		progress = 0.0f;
		status = 0;
		optErrorReason.clear();
		optResultCount = 0;
	}

	// equals implementation 
	public final boolean equals(final Object peer_) {
		if (!(peer_ instanceof QueryStatus)) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		QueryStatus peer = (QueryStatus) peer_;
		boolean ret = __validFields.equals(peer.__validFields);
		if (!ret)
			return ret;
		if (__validFields.get(Field_QUERYID)) {
			ret = (queryId == peer.queryId);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_SHARDID)) {
			ret = (shardId == peer.shardId);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_ATTEMPTS)) {
			ret = (attempts == peer.attempts);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_LASTATTEMPTTIME)) {
			ret = (lastAttemptTime == peer.lastAttemptTime);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_PROGRESS)) {
			ret = (progress == peer.progress);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_STATUS)) {
			ret = (status == peer.status);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_OPTERRORREASON)) {
			ret = optErrorReason.equals(peer.optErrorReason);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_OPTRESULTCOUNT)) {
			ret = (optResultCount == peer.optResultCount);
			if (!ret)
				return ret;
		}
		return ret;
	}

	// clone implementation 
	@SuppressWarnings("unchecked")
	public final Object clone() throws CloneNotSupportedException {
		QueryStatus other = new QueryStatus();
		other.__validFields.or(this.__validFields);
		if (__validFields.get(Field_QUERYID)) {
			other.queryId = this.queryId;
		}
		if (__validFields.get(Field_SHARDID)) {
			other.shardId = this.shardId;
		}
		if (__validFields.get(Field_ATTEMPTS)) {
			other.attempts = this.attempts;
		}
		if (__validFields.get(Field_LASTATTEMPTTIME)) {
			other.lastAttemptTime = this.lastAttemptTime;
		}
		if (__validFields.get(Field_PROGRESS)) {
			other.progress = this.progress;
		}
		if (__validFields.get(Field_STATUS)) {
			other.status = this.status;
		}
		if (__validFields.get(Field_OPTERRORREASON)) {
			other.optErrorReason = (TextBytes) this.optErrorReason.clone();
		}
		if (__validFields.get(Field_OPTRESULTCOUNT)) {
			other.optResultCount = this.optResultCount;
		}
		return other;
	}

	// merge implementation 
	@SuppressWarnings("unchecked")
	public final void merge(QueryStatus peer) throws CloneNotSupportedException {
		__validFields.or(peer.__validFields);
		if (peer.__validFields.get(Field_QUERYID)) {
			this.queryId = peer.queryId;
		}
		if (peer.__validFields.get(Field_SHARDID)) {
			this.shardId = peer.shardId;
		}
		if (peer.__validFields.get(Field_ATTEMPTS)) {
			this.attempts = peer.attempts;
		}
		if (peer.__validFields.get(Field_LASTATTEMPTTIME)) {
			this.lastAttemptTime = peer.lastAttemptTime;
		}
		if (peer.__validFields.get(Field_PROGRESS)) {
			this.progress = peer.progress;
		}
		if (peer.__validFields.get(Field_STATUS)) {
			this.status = peer.status;
		}
		if (peer.__validFields.get(Field_OPTERRORREASON)) {
			this.optErrorReason = (TextBytes) peer.optErrorReason.clone();
		}
		if (peer.__validFields.get(Field_OPTRESULTCOUNT)) {
			this.optResultCount = peer.optResultCount;
		}
	}

	// hashCode implementation 
	public final int hashCode() {
		int result = 1;
		result = MurmurHash.hashLong(queryId, result);
		result = MurmurHash.hashInt((int) shardId, result);
		result = MurmurHash.hashInt((int) attempts, result);
		result = MurmurHash.hashLong(lastAttemptTime, result);
		result = MurmurHash.hashFloat(progress, result);
		result = MurmurHash.hashInt((int) status, result);
		result = MurmurHash.hash(optErrorReason.getBytes(), optErrorReason.getOffset(), optErrorReason.getLength(),
				result);
		result = MurmurHash.hashLong(optResultCount, result);
		return result;
	}
}
