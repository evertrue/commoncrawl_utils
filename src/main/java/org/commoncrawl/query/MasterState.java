// File generated by rpc compiler. Do not edit.

package org.commoncrawl.query;

import java.io.DataInput;
import java.io.DataOutput;
import java.util.BitSet;
import java.io.IOException;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.record.Buffer;
import org.commoncrawl.util.shared.FlexBuffer;
import org.commoncrawl.util.shared.TextBytes;
import org.commoncrawl.util.shared.MurmurHash;
import org.commoncrawl.util.shared.ImmutableBuffer;
import org.commoncrawl.rpc.BinaryProtocol;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.hadoop.conf.Configuration;

// Generated File: MasterState
public class MasterState extends org.commoncrawl.rpc.RPCStructWithId<MasterState> implements Writable {

	// optimized constructor helper 
	public static MasterState newInstance(Configuration conf) {
		return ReflectionUtils.newInstance(MasterState.class, conf);
	}

	// Writable Implementation
	public void write(DataOutput out) throws IOException {
		this.serialize(out, new BinaryProtocol());
	}

	public void readFields(DataInput in) throws IOException {
		this.deserialize(in, new BinaryProtocol());
	}

	// Field Constants
	public static final int Field_LASTQUERYID = 1;
	static final int FieldID_MAX = Field_LASTQUERYID;

	// Field Declarations
	private BitSet __validFields = new BitSet(FieldID_MAX + 1);

	private long lastQueryId;

	// Default Constructor
	public MasterState() {
	}

	// Accessors

	public final boolean isFieldDirty(int fieldId) {
		return __validFields.get(fieldId);
	}

	public final MasterState setFieldDirty(int fieldId) {
		__validFields.set(fieldId);
		return this;
	}

	public final MasterState setFieldClean(int fieldId) {
		__validFields.clear(fieldId);
		return this;
	}

	public long getLastQueryId() {
		return lastQueryId;
	}

	public MasterState setLastQueryId(long lastQueryId) {
		__validFields.set(Field_LASTQUERYID);
		this.lastQueryId = lastQueryId;
		return this;
	}

	// Object Dirty support 

	public final boolean isObjectDirty() {
		boolean isDirty = !__validFields.isEmpty();
		return isDirty;
	}

	// serialize implementation 
	public final void serialize(DataOutput output, BinaryProtocol encoder) throws java.io.IOException {
		encoder.beginFields(output);
		// serialize field:lastQueryId
		if (__validFields.get(Field_LASTQUERYID)) {
			encoder.beginField(output, "lastQueryId", Field_LASTQUERYID);
			encoder.writeLong(output, lastQueryId);
		}
		encoder.endFields(output);
	}

	// deserialize implementation 
	public final void deserialize(DataInput input, BinaryProtocol decoder) throws java.io.IOException {
		// clear existing data first  
		clear();

		// reset protocol object to unknown field id enconding mode (for compatibility)
		decoder.pushFieldIdEncodingMode(BinaryProtocol.FIELD_ID_ENCODING_MODE_UNKNOWN);
		// keep reading fields until terminator (-1) is located 
		int fieldId;
		while ((fieldId = decoder.readFieldId(input)) != -1) {
			switch (fieldId) {
			case Field_LASTQUERYID: {
				__validFields.set(Field_LASTQUERYID);
				lastQueryId = decoder.readLong(input);
			}
				break;
			}
		}
		// pop extra encoding mode off of stack 
		decoder.popFieldIdEncodingMode();
	}

	// clear implementation 
	public final void clear() {
		super.clear();
		__validFields.clear();
		lastQueryId = 0;
	}

	// equals implementation 
	public final boolean equals(final Object peer_) {
		if (!(peer_ instanceof MasterState)) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		MasterState peer = (MasterState) peer_;
		boolean ret = __validFields.equals(peer.__validFields);
		if (!ret)
			return ret;
		if (__validFields.get(Field_LASTQUERYID)) {
			ret = (lastQueryId == peer.lastQueryId);
			if (!ret)
				return ret;
		}
		return ret;
	}

	// clone implementation 
	@SuppressWarnings("unchecked")
	public final Object clone() throws CloneNotSupportedException {
		MasterState other = new MasterState();
		other.__validFields.or(this.__validFields);
		if (__validFields.get(Field_LASTQUERYID)) {
			other.lastQueryId = this.lastQueryId;
		}
		return other;
	}

	// merge implementation 
	@SuppressWarnings("unchecked")
	public final void merge(MasterState peer) throws CloneNotSupportedException {
		__validFields.or(peer.__validFields);
		if (peer.__validFields.get(Field_LASTQUERYID)) {
			this.lastQueryId = peer.lastQueryId;
		}
	}

	// hashCode implementation 
	public final int hashCode() {
		int result = 1;
		result = MurmurHash.hashLong(lastQueryId, result);
		return result;
	}
}
