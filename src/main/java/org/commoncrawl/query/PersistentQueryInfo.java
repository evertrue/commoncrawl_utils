// File generated by rpc compiler. Do not edit.

package org.commoncrawl.query;

import java.io.DataInput;
import java.io.DataOutput;
import java.util.BitSet;
import java.io.IOException;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.record.Buffer;
import org.commoncrawl.util.shared.FlexBuffer;
import org.commoncrawl.util.shared.TextBytes;
import org.commoncrawl.util.shared.MurmurHash;
import org.commoncrawl.util.shared.ImmutableBuffer;
import org.commoncrawl.rpc.BinaryProtocol;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.hadoop.conf.Configuration;

// Generated File: PersistentQueryInfo
public class PersistentQueryInfo extends org.commoncrawl.rpc.RPCStructWithId<PersistentQueryInfo> implements Writable {

	// optimized constructor helper 
	public static PersistentQueryInfo newInstance(Configuration conf) {
		return ReflectionUtils.newInstance(PersistentQueryInfo.class, conf);
	}

	// Writable Implementation
	public void write(DataOutput out) throws IOException {
		this.serialize(out, new BinaryProtocol());
	}

	public void readFields(DataInput in) throws IOException {
		this.deserialize(in, new BinaryProtocol());
	}

	// Field Constants
	public static final int Field_QUERYID = 1;
	public static final int Field_CANNONICALQUERYID = 3;
	static final int FieldID_MAX = Field_CANNONICALQUERYID;

	// Field Declarations
	private BitSet __validFields = new BitSet(FieldID_MAX + 1);

	private long queryId;
	private TextBytes cannonicalQueryId = new TextBytes();

	// Default Constructor
	public PersistentQueryInfo() {
	}

	// Accessors

	public final boolean isFieldDirty(int fieldId) {
		return __validFields.get(fieldId);
	}

	public final PersistentQueryInfo setFieldDirty(int fieldId) {
		__validFields.set(fieldId);
		return this;
	}

	public final PersistentQueryInfo setFieldClean(int fieldId) {
		__validFields.clear(fieldId);
		return this;
	}

	public long getQueryId() {
		return queryId;
	}

	public PersistentQueryInfo setQueryId(long queryId) {
		__validFields.set(Field_QUERYID);
		this.queryId = queryId;
		return this;
	}

	public TextBytes getCannonicalQueryIdAsTextBytes() {
		return cannonicalQueryId;
	}

	public String getCannonicalQueryId() {
		return cannonicalQueryId.toString();
	}

	public PersistentQueryInfo setCannonicalQueryId(String cannonicalQueryId) {
		__validFields.set(Field_CANNONICALQUERYID);
		this.cannonicalQueryId.set(cannonicalQueryId);
		return this;
	}

	// Object Dirty support 

	public final boolean isObjectDirty() {
		boolean isDirty = !__validFields.isEmpty();
		return isDirty;
	}

	// serialize implementation 
	public final void serialize(DataOutput output, BinaryProtocol encoder) throws java.io.IOException {
		encoder.beginFields(output);
		// serialize field:queryId
		if (__validFields.get(Field_QUERYID)) {
			encoder.beginField(output, "queryId", Field_QUERYID);
			encoder.writeLong(output, queryId);
		}
		// serialize field:cannonicalQueryId
		if (__validFields.get(Field_CANNONICALQUERYID)) {
			encoder.beginField(output, "cannonicalQueryId", Field_CANNONICALQUERYID);
			encoder.writeTextBytes(output, cannonicalQueryId);
		}
		encoder.endFields(output);
	}

	// deserialize implementation 
	public final void deserialize(DataInput input, BinaryProtocol decoder) throws java.io.IOException {
		// clear existing data first  
		clear();

		// reset protocol object to unknown field id enconding mode (for compatibility)
		decoder.pushFieldIdEncodingMode(BinaryProtocol.FIELD_ID_ENCODING_MODE_UNKNOWN);
		// keep reading fields until terminator (-1) is located 
		int fieldId;
		while ((fieldId = decoder.readFieldId(input)) != -1) {
			switch (fieldId) {
			case Field_QUERYID: {
				__validFields.set(Field_QUERYID);
				queryId = decoder.readLong(input);
			}
				break;
			case Field_CANNONICALQUERYID: {
				__validFields.set(Field_CANNONICALQUERYID);
				decoder.readTextBytes(input, cannonicalQueryId);
			}
				break;
			}
		}
		// pop extra encoding mode off of stack 
		decoder.popFieldIdEncodingMode();
	}

	// clear implementation 
	public final void clear() {
		super.clear();
		__validFields.clear();
		queryId = 0;
		cannonicalQueryId.clear();
	}

	// equals implementation 
	public final boolean equals(final Object peer_) {
		if (!(peer_ instanceof PersistentQueryInfo)) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		PersistentQueryInfo peer = (PersistentQueryInfo) peer_;
		boolean ret = __validFields.equals(peer.__validFields);
		if (!ret)
			return ret;
		if (__validFields.get(Field_QUERYID)) {
			ret = (queryId == peer.queryId);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_CANNONICALQUERYID)) {
			ret = cannonicalQueryId.equals(peer.cannonicalQueryId);
			if (!ret)
				return ret;
		}
		return ret;
	}

	// clone implementation 
	@SuppressWarnings("unchecked")
	public final Object clone() throws CloneNotSupportedException {
		PersistentQueryInfo other = new PersistentQueryInfo();
		other.__validFields.or(this.__validFields);
		if (__validFields.get(Field_QUERYID)) {
			other.queryId = this.queryId;
		}
		if (__validFields.get(Field_CANNONICALQUERYID)) {
			other.cannonicalQueryId = (TextBytes) this.cannonicalQueryId.clone();
		}
		return other;
	}

	// merge implementation 
	@SuppressWarnings("unchecked")
	public final void merge(PersistentQueryInfo peer) throws CloneNotSupportedException {
		__validFields.or(peer.__validFields);
		if (peer.__validFields.get(Field_QUERYID)) {
			this.queryId = peer.queryId;
		}
		if (peer.__validFields.get(Field_CANNONICALQUERYID)) {
			this.cannonicalQueryId = (TextBytes) peer.cannonicalQueryId.clone();
		}
	}

	// hashCode implementation 
	public final int hashCode() {
		int result = 1;
		result = MurmurHash.hashLong(queryId, result);
		result = MurmurHash.hash(cannonicalQueryId.getBytes(), cannonicalQueryId.getOffset(),
				cannonicalQueryId.getLength(), result);
		return result;
	}
}
