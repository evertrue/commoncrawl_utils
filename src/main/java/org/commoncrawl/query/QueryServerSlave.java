// File generated by rpc compiler. Do not edit.

package org.commoncrawl.query;

import java.io.DataInputStream;
import java.io.IOException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.util.StringUtils;
import org.commoncrawl.rpc.*;
import org.commoncrawl.async.EventLoop;

public interface QueryServerSlave extends ActorInterface {

	public static final Log LOG_PRIVATE = LogFactory.getLog(QueryServerSlave.class);

	/** interface specification **/

	// method initializeQuerySlave (in org.commoncrawl.query.BaseConfig, out SlaveStatus);
	void initializeQuerySlave(
			IncomingMessageContext<org.commoncrawl.query.BaseConfig, org.commoncrawl.query.SlaveStatus> message)
			throws RPCException;

	// method doQuery (in org.commoncrawl.query.RemoteQueryInfo, out QueryStatus);
	void doQuery(
			IncomingMessageContext<org.commoncrawl.query.RemoteQueryInfo, org.commoncrawl.query.QueryStatus> message)
			throws RPCException;

	// method cancelQuery (in org.commoncrawl.query.QueryCommon, out EmptyStruct);
	void cancelQuery(IncomingMessageContext<org.commoncrawl.query.QueryCommon, EmptyStruct> message)
			throws RPCException;

	// method heartbeatQuerySlave (in EmptyStruct, out SlaveStatus);
	void heartbeatQuerySlave(IncomingMessageContext<EmptyStruct, org.commoncrawl.query.SlaveStatus> message)
			throws RPCException;

	/** server specification struct **/
	public static RPCSpecification spec = new RPCSpecification("QueryServerSlave", new QueryServerSlave.Dispatcher());

	// Async Client  Stub
	public static class AsyncStub extends ActorInterface.AsyncStub {

		// constructor
		public AsyncStub(Channel channel, EventLoop optionalEventLoop) {
			super(channel, optionalEventLoop);
		}

		// public OutgoingMessageContext<BaseConfig,SlaveStatus> initializeQuerySlave(BaseConfig input,OutgoingMessageContext<BaseConfig,SlaveStatus> callback) throws RPCException
		public OutgoingMessageContext<org.commoncrawl.query.BaseConfig, org.commoncrawl.query.SlaveStatus> initializeQuerySlave(
				org.commoncrawl.query.BaseConfig input,
				OutgoingMessageContext.Callback<org.commoncrawl.query.BaseConfig, org.commoncrawl.query.SlaveStatus> callback)
				throws RPCException {
			OutgoingMessageContext<org.commoncrawl.query.BaseConfig, org.commoncrawl.query.SlaveStatus> request = new OutgoingMessageContext<org.commoncrawl.query.BaseConfig, org.commoncrawl.query.SlaveStatus>(
					spec._name, "initializeQuerySlave", input, new org.commoncrawl.query.SlaveStatus(), callback);
			getChannel().sendRequest(request);
			return request;
		}

		// public OutgoingMessageContext<RemoteQueryInfo,QueryStatus> doQuery(RemoteQueryInfo input,OutgoingMessageContext<RemoteQueryInfo,QueryStatus> callback) throws RPCException
		public OutgoingMessageContext<org.commoncrawl.query.RemoteQueryInfo, org.commoncrawl.query.QueryStatus> doQuery(
				org.commoncrawl.query.RemoteQueryInfo input,
				OutgoingMessageContext.Callback<org.commoncrawl.query.RemoteQueryInfo, org.commoncrawl.query.QueryStatus> callback)
				throws RPCException {
			OutgoingMessageContext<org.commoncrawl.query.RemoteQueryInfo, org.commoncrawl.query.QueryStatus> request = new OutgoingMessageContext<org.commoncrawl.query.RemoteQueryInfo, org.commoncrawl.query.QueryStatus>(
					spec._name, "doQuery", input, new org.commoncrawl.query.QueryStatus(), callback);
			getChannel().sendRequest(request);
			return request;
		}

		// public OutgoingMessageContext<QueryCommon,EmptyStruct> cancelQuery(QueryCommon input,OutgoingMessageContext<QueryCommon,EmptyStruct> callback) throws RPCException
		public OutgoingMessageContext<org.commoncrawl.query.QueryCommon, EmptyStruct> cancelQuery(
				org.commoncrawl.query.QueryCommon input,
				OutgoingMessageContext.Callback<org.commoncrawl.query.QueryCommon, EmptyStruct> callback)
				throws RPCException {
			OutgoingMessageContext<org.commoncrawl.query.QueryCommon, EmptyStruct> request = new OutgoingMessageContext<org.commoncrawl.query.QueryCommon, EmptyStruct>(
					spec._name, "cancelQuery", input, EmptyStruct.getSingleton(), callback);
			getChannel().sendRequest(request);
			return request;
		}

		// public OutgoingMessageContext<EmptyStruct,SlaveStatus> heartbeatQuerySlave(EmptyStruct input,OutgoingMessageContext<EmptyStruct,SlaveStatus> callback) throws RPCException
		public OutgoingMessageContext<EmptyStruct, org.commoncrawl.query.SlaveStatus> heartbeatQuerySlave(
				OutgoingMessageContext.Callback<EmptyStruct, org.commoncrawl.query.SlaveStatus> callback)
				throws RPCException {
			OutgoingMessageContext<EmptyStruct, org.commoncrawl.query.SlaveStatus> request = new OutgoingMessageContext<EmptyStruct, org.commoncrawl.query.SlaveStatus>(
					spec._name, "heartbeatQuerySlave", EmptyStruct.getSingleton(),
					new org.commoncrawl.query.SlaveStatus(), callback);
			getChannel().sendRequest(request);
			return request;
		}

	}

	// Blocking Client Stub
	public static class BlockingStub extends ActorInterface.BlockingStub<QueryServerSlave.AsyncStub> {
		// constructor

		public BlockingStub(Channel channel, EventLoop optionalEventLoop) {
			super(new AsyncStub(channel, optionalEventLoop));
		}

		// public SlaveStatus initializeQuerySlave(BaseConfig input) throws RPCException
		@SuppressWarnings("unchecked")
		public org.commoncrawl.query.SlaveStatus initializeQuerySlave(org.commoncrawl.query.BaseConfig input)
				throws RPCException {

			final CountDownLatch latch = new CountDownLatch(1);

			OutgoingMessageContext<org.commoncrawl.query.BaseConfig, org.commoncrawl.query.SlaveStatus> request = this
					.getAsyncStub().initializeQuerySlave(input, new OutgoingMessageContext.Callback() {

						public void requestComplete(OutgoingMessageContext request) {
							latch.countDown();
						}
					});

			try {
				if (super.waitForResult(latch)) {
					return request.getOutput();
				}
				throw new RPCException("RPC Timeout");
			} catch (IOException e) {
				LOG_PRIVATE.error(StringUtils.stringifyException(e));
				throw new RPCException(e);
			}
		}

		// public QueryStatus doQuery(RemoteQueryInfo input) throws RPCException
		@SuppressWarnings("unchecked")
		public org.commoncrawl.query.QueryStatus doQuery(org.commoncrawl.query.RemoteQueryInfo input)
				throws RPCException {

			final CountDownLatch latch = new CountDownLatch(1);

			OutgoingMessageContext<org.commoncrawl.query.RemoteQueryInfo, org.commoncrawl.query.QueryStatus> request = this
					.getAsyncStub().doQuery(input, new OutgoingMessageContext.Callback() {

						public void requestComplete(OutgoingMessageContext request) {
							latch.countDown();
						}
					});

			try {
				if (super.waitForResult(latch)) {
					return request.getOutput();
				}
				throw new RPCException("RPC Timeout");
			} catch (IOException e) {
				LOG_PRIVATE.error(StringUtils.stringifyException(e));
				throw new RPCException(e);
			}
		}

		// public EmptyStruct cancelQuery(QueryCommon input) throws RPCException
		@SuppressWarnings("unchecked")
		public void cancelQuery(org.commoncrawl.query.QueryCommon input) throws RPCException {

			final CountDownLatch latch = new CountDownLatch(1);

			OutgoingMessageContext<org.commoncrawl.query.QueryCommon, EmptyStruct> request = this.getAsyncStub()
					.cancelQuery(input, new OutgoingMessageContext.Callback() {

						public void requestComplete(OutgoingMessageContext request) {
							latch.countDown();
						}
					});

			try {
				if (super.waitForResult(latch)) {
					return;
				}
				throw new RPCException("RPC Timeout");
			} catch (IOException e) {
				LOG_PRIVATE.error(StringUtils.stringifyException(e));
				throw new RPCException(e);
			}
		}

		// public SlaveStatus heartbeatQuerySlave(EmptyStruct input) throws RPCException
		@SuppressWarnings("unchecked")
		public org.commoncrawl.query.SlaveStatus heartbeatQuerySlave() throws RPCException {

			final CountDownLatch latch = new CountDownLatch(1);

			OutgoingMessageContext<EmptyStruct, org.commoncrawl.query.SlaveStatus> request = this.getAsyncStub()
					.heartbeatQuerySlave(new OutgoingMessageContext.Callback() {

						public void requestComplete(OutgoingMessageContext request) {
							latch.countDown();
						}
					});

			try {
				if (super.waitForResult(latch)) {
					return request.getOutput();
				}
				throw new RPCException("RPC Timeout");
			} catch (IOException e) {
				LOG_PRIVATE.error(StringUtils.stringifyException(e));
				throw new RPCException(e);
			}
		}

	}

	/** typed dispatcher object **/
	public static class Dispatcher implements RPCMessageDispatcher {
		//@Override
		public void dispatch(ActorInterface instance, RPCServerChannel serverChannel, String serviceId,
				String methodName, DataInputStream messagePayload, int requestId, Channel channel) throws RPCException {

			if (methodName.equals("initializeQuerySlave")) {
				org.commoncrawl.query.BaseConfig input = new org.commoncrawl.query.BaseConfig();
				org.commoncrawl.query.SlaveStatus output = new org.commoncrawl.query.SlaveStatus();
				try {
					input.deserialize(messagePayload, new BinaryProtocol());
				} catch (IOException e) {
					LOG_PRIVATE.error(StringUtils.stringifyException(e));
					throw new RPCException(e);
				}

				IncomingMessageContext<org.commoncrawl.query.BaseConfig, org.commoncrawl.query.SlaveStatus> messageData = new IncomingMessageContext<org.commoncrawl.query.BaseConfig, org.commoncrawl.query.SlaveStatus>(
						channel, requestId, input, output);
				// Invoke initializeQuerySlave
				((QueryServerSlave) instance).initializeQuerySlave(messageData);

			}

			else if (methodName.equals("doQuery")) {
				org.commoncrawl.query.RemoteQueryInfo input = new org.commoncrawl.query.RemoteQueryInfo();
				org.commoncrawl.query.QueryStatus output = new org.commoncrawl.query.QueryStatus();
				try {
					input.deserialize(messagePayload, new BinaryProtocol());
				} catch (IOException e) {
					LOG_PRIVATE.error(StringUtils.stringifyException(e));
					throw new RPCException(e);
				}

				IncomingMessageContext<org.commoncrawl.query.RemoteQueryInfo, org.commoncrawl.query.QueryStatus> messageData = new IncomingMessageContext<org.commoncrawl.query.RemoteQueryInfo, org.commoncrawl.query.QueryStatus>(
						channel, requestId, input, output);
				// Invoke doQuery
				((QueryServerSlave) instance).doQuery(messageData);

			}

			else if (methodName.equals("cancelQuery")) {
				org.commoncrawl.query.QueryCommon input = new org.commoncrawl.query.QueryCommon();
				EmptyStruct output = EmptyStruct.getSingleton();
				try {
					input.deserialize(messagePayload, new BinaryProtocol());
				} catch (IOException e) {
					LOG_PRIVATE.error(StringUtils.stringifyException(e));
					throw new RPCException(e);
				}

				IncomingMessageContext<org.commoncrawl.query.QueryCommon, EmptyStruct> messageData = new IncomingMessageContext<org.commoncrawl.query.QueryCommon, EmptyStruct>(
						channel, requestId, input, output);
				// Invoke cancelQuery
				((QueryServerSlave) instance).cancelQuery(messageData);

			}

			else if (methodName.equals("heartbeatQuerySlave")) {
				EmptyStruct input = EmptyStruct.getSingleton();
				org.commoncrawl.query.SlaveStatus output = new org.commoncrawl.query.SlaveStatus();
				IncomingMessageContext<EmptyStruct, org.commoncrawl.query.SlaveStatus> messageData = new IncomingMessageContext<EmptyStruct, org.commoncrawl.query.SlaveStatus>(
						channel, requestId, input, output);
				// Invoke heartbeatQuerySlave
				((QueryServerSlave) instance).heartbeatQuerySlave(messageData);

			}

			else {
				LOG_PRIVATE.error("UNKNOWN METHOD NAME:" + methodName);

			}
		}
	}

	/** typed actor object **/
	public static class InProcessActorFactory {
		public static InProcessActor createInProcessActor(final QueryServerSlave instance, ThreadPoolExecutor executor,
				InProcessActor.Events optionalListener) throws IOException {
			InProcessActor actor = new InProcessActor(executor, optionalListener) {

				@SuppressWarnings("unchecked")
				@Override
				public void dispatch(Channel channel, IncomingMessage message) throws RPCException {
					if (message.getServiceName().equals(spec._name)) {
						if (message.getMethodName().equals("initializeQuerySlave")) {
							instance.initializeQuerySlave(message);
						}
						if (message.getMethodName().equals("doQuery")) {
							instance.doQuery(message);
						}
						if (message.getMethodName().equals("cancelQuery")) {
							instance.cancelQuery(message);
						}
						if (message.getMethodName().equals("heartbeatQuerySlave")) {
							instance.heartbeatQuerySlave(message);
						} else {
							LOG_PRIVATE.error("Method:" + message.getMethodName() + " Not Found");
						}
					}
				}
			};
			return actor;
		}
	}
}
