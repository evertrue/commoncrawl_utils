// File generated by rpc compiler. Do not edit.

package org.commoncrawl.protocol.shared;

import java.io.DataInput;
import java.io.DataOutput;
import java.util.BitSet;
import java.io.IOException;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.record.Buffer;
import org.commoncrawl.util.shared.FlexBuffer;
import org.commoncrawl.util.shared.TextBytes;
import org.commoncrawl.util.shared.MurmurHash;
import org.commoncrawl.util.shared.ImmutableBuffer;
import org.commoncrawl.rpc.BinaryProtocol;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.hadoop.conf.Configuration;

// Generated File: CacheItem
public class CacheItem extends org.commoncrawl.rpc.RPCStruct<CacheItem> implements Writable {

	// optimized constructor helper 
	public static CacheItem newInstance(Configuration conf) {
		return ReflectionUtils.newInstance(CacheItem.class, conf);
	}

	// Writable Implementation
	public void write(DataOutput out) throws IOException {
		this.serialize(out, new BinaryProtocol());
	}

	public void readFields(DataInput in) throws IOException {
		this.deserialize(in, new BinaryProtocol());
	}

	// Field Constants
	public static final int Field_URL = 1;
	public static final int Field_URLFINGERPRINT = 2;
	public static final int Field_SOURCE = 3;
	public static final int Field_FLAGS = 4;
	public static final int Field_FINALURL = 5;
	public static final int Field_HEADERITEMS = 6;
	public static final int Field_CONTENT = 7;
	static final int FieldID_MAX = Field_CONTENT;

	// Enumerations

	// Enum:Source
	public static final class Source {
		public static final int WebRequest = 1;
		public static final int S3Cache = 2;

		public static String toString(int enumValue) {
			switch (enumValue) {
			case 1:
				return "WebRequest";
			case 2:
				return "S3Cache";
			default:
				return "";
			}
		}
	}

	// Enum:Flags
	public static final class Flags {
		public static final int Flag_IsTemporaryRedirect = 1;
		public static final int Flag_IsPermanentRedirect = 2;
		public static final int Flag_IsCompressed = 4;
		public static final int Flag_WasTruncatedDuringDownload = 8;
		public static final int Flag_WasTruncatedDuringInflate = 16;

		public static String toString(int enumValue) {
			switch (enumValue) {
			case 1:
				return "Flag_IsTemporaryRedirect";
			case 2:
				return "Flag_IsPermanentRedirect";
			case 4:
				return "Flag_IsCompressed";
			case 8:
				return "Flag_WasTruncatedDuringDownload";
			case 16:
				return "Flag_WasTruncatedDuringInflate";
			default:
				return "";
			}
		}
	}

	// Field Declarations
	private BitSet __validFields = new BitSet(FieldID_MAX + 1);

	private TextBytes url = new TextBytes();
	private long urlFingerprint;
	private byte source;
	private int flags;
	private TextBytes finalURL = new TextBytes();
	private java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem> headerItems = new java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem>();
	private FlexBuffer content = new FlexBuffer();

	// Default Constructor
	public CacheItem() {
	}

	// Accessors

	public final boolean isFieldDirty(int fieldId) {
		return __validFields.get(fieldId);
	}

	public final CacheItem setFieldDirty(int fieldId) {
		__validFields.set(fieldId);
		return this;
	}

	public final CacheItem setFieldClean(int fieldId) {
		__validFields.clear(fieldId);
		return this;
	}

	public TextBytes getUrlAsTextBytes() {
		return url;
	}

	public String getUrl() {
		return url.toString();
	}

	public CacheItem setUrl(String url) {
		__validFields.set(Field_URL);
		this.url.set(url);
		return this;
	}

	public long getUrlFingerprint() {
		return urlFingerprint;
	}

	public CacheItem setUrlFingerprint(long urlFingerprint) {
		__validFields.set(Field_URLFINGERPRINT);
		this.urlFingerprint = urlFingerprint;
		return this;
	}

	public byte getSource() {
		return source;
	}

	public CacheItem setSource(byte source) {
		__validFields.set(Field_SOURCE);
		this.source = source;
		return this;
	}

	public int getFlags() {
		return flags;
	}

	public CacheItem setFlags(int flags) {
		__validFields.set(Field_FLAGS);
		this.flags = flags;
		return this;
	}

	public TextBytes getFinalURLAsTextBytes() {
		return finalURL;
	}

	public String getFinalURL() {
		return finalURL.toString();
	}

	public CacheItem setFinalURL(String finalURL) {
		__validFields.set(Field_FINALURL);
		this.finalURL.set(finalURL);
		return this;
	}

	public java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem> getHeaderItems() {
		return headerItems;
	}

	public CacheItem setHeaderItems(java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem> headerItems) {
		__validFields.set(Field_HEADERITEMS);
		this.headerItems = headerItems;
		return this;
	}

	public ImmutableBuffer getContent() {
		return new ImmutableBuffer(content);
	}

	public CacheItem setContent(FlexBuffer content) {
		__validFields.set(Field_CONTENT);
		this.content = content;
		return this;
	}

	public CacheItem setContent(Buffer content, boolean shared) {
		__validFields.set(Field_CONTENT);
		this.content = new FlexBuffer(content.get(), 0, content.getCount(), shared);
		return this;
	}

	// Object Dirty support 

	public final boolean isObjectDirty() {
		boolean isDirty = !__validFields.isEmpty();
		if (!isDirty) {
			if (!isDirty) {
				isDirty = headerItems.size() != 0;
			}
		}
		return isDirty;
	}

	// serialize implementation 
	public final void serialize(DataOutput output, BinaryProtocol encoder) throws java.io.IOException {
		encoder.beginFields(output);
		// serialize field:url
		if (__validFields.get(Field_URL)) {
			encoder.beginField(output, "url", Field_URL);
			encoder.writeTextBytes(output, url);
		}
		// serialize field:urlFingerprint
		if (__validFields.get(Field_URLFINGERPRINT)) {
			encoder.beginField(output, "urlFingerprint", Field_URLFINGERPRINT);
			encoder.writeLong(output, urlFingerprint);
		}
		// serialize field:source
		if (__validFields.get(Field_SOURCE)) {
			encoder.beginField(output, "source", Field_SOURCE);
			encoder.writeByte(output, source);
		}
		// serialize field:flags
		if (__validFields.get(Field_FLAGS)) {
			encoder.beginField(output, "flags", Field_FLAGS);
			encoder.writeInt(output, flags);
		}
		// serialize field:finalURL
		if (__validFields.get(Field_FINALURL)) {
			encoder.beginField(output, "finalURL", Field_FINALURL);
			encoder.writeTextBytes(output, finalURL);
		}
		// serialize field:headerItems
		if (headerItems.size() != 0) {
			__validFields.set(Field_HEADERITEMS);
			encoder.beginField(output, "headerItems", Field_HEADERITEMS);
			{
				int len1 = headerItems.size();
				encoder.writeInt(output, len1);
				for (int vidx1 = 0; vidx1 < len1; vidx1++) {
					org.commoncrawl.protocol.shared.ArcFileHeaderItem e1 = headerItems.get(vidx1);
					e1.serialize(output, encoder);
				}
			}
		} else {
			__validFields.clear(Field_HEADERITEMS);
		}
		// serialize field:content
		if (__validFields.get(Field_CONTENT)) {
			encoder.beginField(output, "content", Field_CONTENT);
			encoder.writeFlexBuffer(output, content);
		}
		encoder.endFields(output);
	}

	// deserialize implementation 
	public final void deserialize(DataInput input, BinaryProtocol decoder) throws java.io.IOException {
		// clear existing data first  
		clear();

		// reset protocol object to unknown field id enconding mode (for compatibility)
		decoder.pushFieldIdEncodingMode(BinaryProtocol.FIELD_ID_ENCODING_MODE_UNKNOWN);
		// keep reading fields until terminator (-1) is located 
		int fieldId;
		while ((fieldId = decoder.readFieldId(input)) != -1) {
			switch (fieldId) {
			case Field_URL: {
				__validFields.set(Field_URL);
				decoder.readTextBytes(input, url);
			}
				break;
			case Field_URLFINGERPRINT: {
				__validFields.set(Field_URLFINGERPRINT);
				urlFingerprint = decoder.readLong(input);
			}
				break;
			case Field_SOURCE: {
				__validFields.set(Field_SOURCE);
				source = decoder.readByte(input);
			}
				break;
			case Field_FLAGS: {
				__validFields.set(Field_FLAGS);
				flags = decoder.readInt(input);
			}
				break;
			case Field_FINALURL: {
				__validFields.set(Field_FINALURL);
				decoder.readTextBytes(input, finalURL);
			}
				break;
			case Field_HEADERITEMS: {
				__validFields.set(Field_HEADERITEMS);
				{
					int itemCount1 = decoder.readInt(input);
					headerItems = new java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem>();
					for (int i1 = 0; i1 < itemCount1; ++i1) {
						org.commoncrawl.protocol.shared.ArcFileHeaderItem e1;
						e1 = new org.commoncrawl.protocol.shared.ArcFileHeaderItem();
						e1.deserialize(input, decoder);
						headerItems.add(e1);
					}
				}
			}
				break;
			case Field_CONTENT: {
				__validFields.set(Field_CONTENT);
				decoder.readFlexBuffer(input, content);
			}
				break;
			}
		}
		// pop extra encoding mode off of stack 
		decoder.popFieldIdEncodingMode();
	}

	// clear implementation 
	public final void clear() {
		__validFields.clear();
		url.clear();
		urlFingerprint = 0;
		source = 0;
		flags = 0;
		finalURL.clear();
		headerItems.clear();
		content.reset();
	}

	// equals implementation 
	public final boolean equals(final Object peer_) {
		if (!(peer_ instanceof CacheItem)) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		CacheItem peer = (CacheItem) peer_;
		boolean ret = __validFields.equals(peer.__validFields);
		if (!ret)
			return ret;
		if (__validFields.get(Field_URL)) {
			ret = url.equals(peer.url);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_URLFINGERPRINT)) {
			ret = (urlFingerprint == peer.urlFingerprint);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_SOURCE)) {
			ret = (source == peer.source);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_FLAGS)) {
			ret = (flags == peer.flags);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_FINALURL)) {
			ret = finalURL.equals(peer.finalURL);
			if (!ret)
				return ret;
		}
		if (headerItems.size() != 0) {
			ret = headerItems.equals(peer.headerItems);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_CONTENT)) {
			ret = content.equals(peer.content);
			if (!ret)
				return ret;
		}
		return ret;
	}

	// clone implementation 
	@SuppressWarnings("unchecked")
	public final Object clone() throws CloneNotSupportedException {
		CacheItem other = new CacheItem();
		other.__validFields.or(this.__validFields);
		if (__validFields.get(Field_URL)) {
			other.url = (TextBytes) this.url.clone();
		}
		if (__validFields.get(Field_URLFINGERPRINT)) {
			other.urlFingerprint = this.urlFingerprint;
		}
		if (__validFields.get(Field_SOURCE)) {
			other.source = this.source;
		}
		if (__validFields.get(Field_FLAGS)) {
			other.flags = this.flags;
		}
		if (__validFields.get(Field_FINALURL)) {
			other.finalURL = (TextBytes) this.finalURL.clone();
		}
		{
			//Deep Copy Vector
			other.headerItems = new java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem>();
			int len0 = this.headerItems.size();
			for (int vidx0 = 0; vidx0 < len0; vidx0++) {
				org.commoncrawl.protocol.shared.ArcFileHeaderItem src0 = this.headerItems.get(vidx0);
				org.commoncrawl.protocol.shared.ArcFileHeaderItem tgt0;
				tgt0 = (org.commoncrawl.protocol.shared.ArcFileHeaderItem) src0.clone();
				other.headerItems.add(tgt0);
			}
		}
		if (__validFields.get(Field_CONTENT)) {
			other.content = (FlexBuffer) this.content.clone();
		}
		return other;
	}

	// merge implementation 
	@SuppressWarnings("unchecked")
	public final void merge(CacheItem peer) throws CloneNotSupportedException {
		__validFields.or(peer.__validFields);
		if (peer.__validFields.get(Field_URL)) {
			this.url = (TextBytes) peer.url.clone();
		}
		if (peer.__validFields.get(Field_URLFINGERPRINT)) {
			this.urlFingerprint = peer.urlFingerprint;
		}
		if (peer.__validFields.get(Field_SOURCE)) {
			this.source = peer.source;
		}
		if (peer.__validFields.get(Field_FLAGS)) {
			this.flags = peer.flags;
		}
		if (peer.__validFields.get(Field_FINALURL)) {
			this.finalURL = (TextBytes) peer.finalURL.clone();
		}
		{
			//Deep Copy Vector
			int len0 = peer.headerItems.size();
			for (int vidx0 = 0; vidx0 < len0; vidx0++) {
				org.commoncrawl.protocol.shared.ArcFileHeaderItem src0 = peer.headerItems.get(vidx0);
				org.commoncrawl.protocol.shared.ArcFileHeaderItem tgt0;
				tgt0 = (org.commoncrawl.protocol.shared.ArcFileHeaderItem) src0.clone();
				this.headerItems.add(tgt0);
			}
		}
		if (peer.__validFields.get(Field_CONTENT)) {
			this.content = (FlexBuffer) peer.content.clone();
		}
	}

	// hashCode implementation 
	public final int hashCode() {
		int result = 1;
		result = MurmurHash.hash(url.getBytes(), url.getOffset(), url.getLength(), result);
		result = MurmurHash.hashLong(urlFingerprint, result);
		result = MurmurHash.hashInt((int) source, result);
		result = MurmurHash.hashInt((int) flags, result);
		result = MurmurHash.hash(finalURL.getBytes(), finalURL.getOffset(), finalURL.getLength(), result);
		result = MurmurHash.hashInt(headerItems.hashCode(), result);
		result = MurmurHash.hash(content.get(), content.getOffset(), content.getCount(), result);
		return result;
	}
}
