// File generated by rpc compiler. Do not edit.

package org.commoncrawl.protocol.shared;

import java.io.DataInput;
import java.io.DataOutput;
import java.util.BitSet;
import java.io.IOException;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.record.Buffer;
import org.commoncrawl.util.shared.FlexBuffer;
import org.commoncrawl.util.shared.TextBytes;
import org.commoncrawl.util.shared.MurmurHash;
import org.commoncrawl.util.shared.ImmutableBuffer;
import org.commoncrawl.rpc.BinaryProtocol;
import org.apache.hadoop.util.ReflectionUtils;
import org.apache.hadoop.conf.Configuration;

// Generated File: ArcFileItem
public class ArcFileItem extends org.commoncrawl.rpc.RPCStruct<ArcFileItem> implements Writable {

	// optimized constructor helper 
	public static ArcFileItem newInstance(Configuration conf) {
		return ReflectionUtils.newInstance(ArcFileItem.class, conf);
	}

	// Writable Implementation
	public void write(DataOutput out) throws IOException {
		this.serialize(out, new BinaryProtocol());
	}

	public void readFields(DataInput in) throws IOException {
		this.deserialize(in, new BinaryProtocol());
	}

	// Field Constants
	public static final int Field_URI = 1;
	public static final int Field_HOSTIP = 2;
	public static final int Field_TIMESTAMP = 3;
	public static final int Field_MIMETYPE = 4;
	public static final int Field_RECORDLENGTH = 5;
	public static final int Field_HEADERITEMS = 6;
	public static final int Field_CONTENT = 7;
	public static final int Field_ARCFILENAME = 8;
	public static final int Field_ARCFILEPOS = 9;
	public static final int Field_FLAGS = 10;
	public static final int Field_ARCFILESIZE = 11;
	static final int FieldID_MAX = Field_ARCFILESIZE;

	// Enumerations

	// Enum:Flags
	public static final class Flags {
		public static final int TruncatedInDownload = 1;
		public static final int TruncatedInInflate = 2;

		public static String toString(int enumValue) {
			switch (enumValue) {
			case 1:
				return "TruncatedInDownload";
			case 2:
				return "TruncatedInInflate";
			default:
				return "";
			}
		}
	}

	// Field Declarations
	private BitSet __validFields = new BitSet(FieldID_MAX + 1);

	private TextBytes uri = new TextBytes();
	private TextBytes hostIP = new TextBytes();
	private long timestamp;
	private TextBytes mimeType = new TextBytes();
	private int recordLength;
	private java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem> headerItems = new java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem>();
	private FlexBuffer content = new FlexBuffer();
	private TextBytes arcFileName = new TextBytes();
	private int arcFilePos;
	private int flags;
	private int arcFileSize;

	// Default Constructor
	public ArcFileItem() {
	}

	// Accessors

	public final boolean isFieldDirty(int fieldId) {
		return __validFields.get(fieldId);
	}

	public final ArcFileItem setFieldDirty(int fieldId) {
		__validFields.set(fieldId);
		return this;
	}

	public final ArcFileItem setFieldClean(int fieldId) {
		__validFields.clear(fieldId);
		return this;
	}

	public TextBytes getUriAsTextBytes() {
		return uri;
	}

	public String getUri() {
		return uri.toString();
	}

	public ArcFileItem setUri(String uri) {
		__validFields.set(Field_URI);
		this.uri.set(uri);
		return this;
	}

	public TextBytes getHostIPAsTextBytes() {
		return hostIP;
	}

	public String getHostIP() {
		return hostIP.toString();
	}

	public ArcFileItem setHostIP(String hostIP) {
		__validFields.set(Field_HOSTIP);
		this.hostIP.set(hostIP);
		return this;
	}

	public long getTimestamp() {
		return timestamp;
	}

	public ArcFileItem setTimestamp(long timestamp) {
		__validFields.set(Field_TIMESTAMP);
		this.timestamp = timestamp;
		return this;
	}

	public TextBytes getMimeTypeAsTextBytes() {
		return mimeType;
	}

	public String getMimeType() {
		return mimeType.toString();
	}

	public ArcFileItem setMimeType(String mimeType) {
		__validFields.set(Field_MIMETYPE);
		this.mimeType.set(mimeType);
		return this;
	}

	public int getRecordLength() {
		return recordLength;
	}

	public ArcFileItem setRecordLength(int recordLength) {
		__validFields.set(Field_RECORDLENGTH);
		this.recordLength = recordLength;
		return this;
	}

	public java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem> getHeaderItems() {
		return headerItems;
	}

	public ArcFileItem setHeaderItems(java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem> headerItems) {
		__validFields.set(Field_HEADERITEMS);
		this.headerItems = headerItems;
		return this;
	}

	public ImmutableBuffer getContent() {
		return new ImmutableBuffer(content);
	}

	public ArcFileItem setContent(FlexBuffer content) {
		__validFields.set(Field_CONTENT);
		this.content = content;
		return this;
	}

	public ArcFileItem setContent(Buffer content, boolean shared) {
		__validFields.set(Field_CONTENT);
		this.content = new FlexBuffer(content.get(), 0, content.getCount(), shared);
		return this;
	}

	public TextBytes getArcFileNameAsTextBytes() {
		return arcFileName;
	}

	public String getArcFileName() {
		return arcFileName.toString();
	}

	public ArcFileItem setArcFileName(String arcFileName) {
		__validFields.set(Field_ARCFILENAME);
		this.arcFileName.set(arcFileName);
		return this;
	}

	public int getArcFilePos() {
		return arcFilePos;
	}

	public ArcFileItem setArcFilePos(int arcFilePos) {
		__validFields.set(Field_ARCFILEPOS);
		this.arcFilePos = arcFilePos;
		return this;
	}

	public int getFlags() {
		return flags;
	}

	public ArcFileItem setFlags(int flags) {
		__validFields.set(Field_FLAGS);
		this.flags = flags;
		return this;
	}

	public int getArcFileSize() {
		return arcFileSize;
	}

	public ArcFileItem setArcFileSize(int arcFileSize) {
		__validFields.set(Field_ARCFILESIZE);
		this.arcFileSize = arcFileSize;
		return this;
	}

	// Object Dirty support 

	public final boolean isObjectDirty() {
		boolean isDirty = !__validFields.isEmpty();
		if (!isDirty) {
			if (!isDirty) {
				isDirty = headerItems.size() != 0;
			}
		}
		return isDirty;
	}

	// serialize implementation 
	public final void serialize(DataOutput output, BinaryProtocol encoder) throws java.io.IOException {
		encoder.beginFields(output);
		// serialize field:uri
		if (__validFields.get(Field_URI)) {
			encoder.beginField(output, "uri", Field_URI);
			encoder.writeTextBytes(output, uri);
		}
		// serialize field:hostIP
		if (__validFields.get(Field_HOSTIP)) {
			encoder.beginField(output, "hostIP", Field_HOSTIP);
			encoder.writeTextBytes(output, hostIP);
		}
		// serialize field:timestamp
		if (__validFields.get(Field_TIMESTAMP)) {
			encoder.beginField(output, "timestamp", Field_TIMESTAMP);
			encoder.writeLong(output, timestamp);
		}
		// serialize field:mimeType
		if (__validFields.get(Field_MIMETYPE)) {
			encoder.beginField(output, "mimeType", Field_MIMETYPE);
			encoder.writeTextBytes(output, mimeType);
		}
		// serialize field:recordLength
		if (__validFields.get(Field_RECORDLENGTH)) {
			encoder.beginField(output, "recordLength", Field_RECORDLENGTH);
			encoder.writeInt(output, recordLength);
		}
		// serialize field:headerItems
		if (headerItems.size() != 0) {
			__validFields.set(Field_HEADERITEMS);
			encoder.beginField(output, "headerItems", Field_HEADERITEMS);
			{
				int len1 = headerItems.size();
				encoder.writeInt(output, len1);
				for (int vidx1 = 0; vidx1 < len1; vidx1++) {
					org.commoncrawl.protocol.shared.ArcFileHeaderItem e1 = headerItems.get(vidx1);
					e1.serialize(output, encoder);
				}
			}
		} else {
			__validFields.clear(Field_HEADERITEMS);
		}
		// serialize field:content
		if (__validFields.get(Field_CONTENT)) {
			encoder.beginField(output, "content", Field_CONTENT);
			encoder.writeFlexBuffer(output, content);
		}
		// serialize field:arcFileName
		if (__validFields.get(Field_ARCFILENAME)) {
			encoder.beginField(output, "arcFileName", Field_ARCFILENAME);
			encoder.writeTextBytes(output, arcFileName);
		}
		// serialize field:arcFilePos
		if (__validFields.get(Field_ARCFILEPOS)) {
			encoder.beginField(output, "arcFilePos", Field_ARCFILEPOS);
			encoder.writeInt(output, arcFilePos);
		}
		// serialize field:flags
		if (__validFields.get(Field_FLAGS)) {
			encoder.beginField(output, "flags", Field_FLAGS);
			encoder.writeInt(output, flags);
		}
		// serialize field:arcFileSize
		if (__validFields.get(Field_ARCFILESIZE)) {
			encoder.beginField(output, "arcFileSize", Field_ARCFILESIZE);
			encoder.writeInt(output, arcFileSize);
		}
		encoder.endFields(output);
	}

	// deserialize implementation 
	public final void deserialize(DataInput input, BinaryProtocol decoder) throws java.io.IOException {
		// clear existing data first  
		clear();

		// reset protocol object to unknown field id enconding mode (for compatibility)
		decoder.pushFieldIdEncodingMode(BinaryProtocol.FIELD_ID_ENCODING_MODE_UNKNOWN);
		// keep reading fields until terminator (-1) is located 
		int fieldId;
		while ((fieldId = decoder.readFieldId(input)) != -1) {
			switch (fieldId) {
			case Field_URI: {
				__validFields.set(Field_URI);
				decoder.readTextBytes(input, uri);
			}
				break;
			case Field_HOSTIP: {
				__validFields.set(Field_HOSTIP);
				decoder.readTextBytes(input, hostIP);
			}
				break;
			case Field_TIMESTAMP: {
				__validFields.set(Field_TIMESTAMP);
				timestamp = decoder.readLong(input);
			}
				break;
			case Field_MIMETYPE: {
				__validFields.set(Field_MIMETYPE);
				decoder.readTextBytes(input, mimeType);
			}
				break;
			case Field_RECORDLENGTH: {
				__validFields.set(Field_RECORDLENGTH);
				recordLength = decoder.readInt(input);
			}
				break;
			case Field_HEADERITEMS: {
				__validFields.set(Field_HEADERITEMS);
				{
					int itemCount1 = decoder.readInt(input);
					headerItems = new java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem>();
					for (int i1 = 0; i1 < itemCount1; ++i1) {
						org.commoncrawl.protocol.shared.ArcFileHeaderItem e1;
						e1 = new org.commoncrawl.protocol.shared.ArcFileHeaderItem();
						e1.deserialize(input, decoder);
						headerItems.add(e1);
					}
				}
			}
				break;
			case Field_CONTENT: {
				__validFields.set(Field_CONTENT);
				decoder.readFlexBuffer(input, content);
			}
				break;
			case Field_ARCFILENAME: {
				__validFields.set(Field_ARCFILENAME);
				decoder.readTextBytes(input, arcFileName);
			}
				break;
			case Field_ARCFILEPOS: {
				__validFields.set(Field_ARCFILEPOS);
				arcFilePos = decoder.readInt(input);
			}
				break;
			case Field_FLAGS: {
				__validFields.set(Field_FLAGS);
				flags = decoder.readInt(input);
			}
				break;
			case Field_ARCFILESIZE: {
				__validFields.set(Field_ARCFILESIZE);
				arcFileSize = decoder.readInt(input);
			}
				break;
			}
		}
		// pop extra encoding mode off of stack 
		decoder.popFieldIdEncodingMode();
	}

	// clear implementation 
	public final void clear() {
		__validFields.clear();
		uri.clear();
		hostIP.clear();
		timestamp = 0;
		mimeType.clear();
		recordLength = 0;
		headerItems.clear();
		content.reset();
		arcFileName.clear();
		arcFilePos = 0;
		flags = 0;
		arcFileSize = 0;
	}

	// equals implementation 
	public final boolean equals(final Object peer_) {
		if (!(peer_ instanceof ArcFileItem)) {
			return false;
		}
		if (peer_ == this) {
			return true;
		}
		ArcFileItem peer = (ArcFileItem) peer_;
		boolean ret = __validFields.equals(peer.__validFields);
		if (!ret)
			return ret;
		if (__validFields.get(Field_URI)) {
			ret = uri.equals(peer.uri);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_HOSTIP)) {
			ret = hostIP.equals(peer.hostIP);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_TIMESTAMP)) {
			ret = (timestamp == peer.timestamp);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_MIMETYPE)) {
			ret = mimeType.equals(peer.mimeType);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_RECORDLENGTH)) {
			ret = (recordLength == peer.recordLength);
			if (!ret)
				return ret;
		}
		if (headerItems.size() != 0) {
			ret = headerItems.equals(peer.headerItems);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_CONTENT)) {
			ret = content.equals(peer.content);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_ARCFILENAME)) {
			ret = arcFileName.equals(peer.arcFileName);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_ARCFILEPOS)) {
			ret = (arcFilePos == peer.arcFilePos);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_FLAGS)) {
			ret = (flags == peer.flags);
			if (!ret)
				return ret;
		}
		if (__validFields.get(Field_ARCFILESIZE)) {
			ret = (arcFileSize == peer.arcFileSize);
			if (!ret)
				return ret;
		}
		return ret;
	}

	// clone implementation 
	@SuppressWarnings("unchecked")
	public final Object clone() throws CloneNotSupportedException {
		ArcFileItem other = new ArcFileItem();
		other.__validFields.or(this.__validFields);
		if (__validFields.get(Field_URI)) {
			other.uri = (TextBytes) this.uri.clone();
		}
		if (__validFields.get(Field_HOSTIP)) {
			other.hostIP = (TextBytes) this.hostIP.clone();
		}
		if (__validFields.get(Field_TIMESTAMP)) {
			other.timestamp = this.timestamp;
		}
		if (__validFields.get(Field_MIMETYPE)) {
			other.mimeType = (TextBytes) this.mimeType.clone();
		}
		if (__validFields.get(Field_RECORDLENGTH)) {
			other.recordLength = this.recordLength;
		}
		{
			//Deep Copy Vector
			other.headerItems = new java.util.ArrayList<org.commoncrawl.protocol.shared.ArcFileHeaderItem>();
			int len0 = this.headerItems.size();
			for (int vidx0 = 0; vidx0 < len0; vidx0++) {
				org.commoncrawl.protocol.shared.ArcFileHeaderItem src0 = this.headerItems.get(vidx0);
				org.commoncrawl.protocol.shared.ArcFileHeaderItem tgt0;
				tgt0 = (org.commoncrawl.protocol.shared.ArcFileHeaderItem) src0.clone();
				other.headerItems.add(tgt0);
			}
		}
		if (__validFields.get(Field_CONTENT)) {
			other.content = (FlexBuffer) this.content.clone();
		}
		if (__validFields.get(Field_ARCFILENAME)) {
			other.arcFileName = (TextBytes) this.arcFileName.clone();
		}
		if (__validFields.get(Field_ARCFILEPOS)) {
			other.arcFilePos = this.arcFilePos;
		}
		if (__validFields.get(Field_FLAGS)) {
			other.flags = this.flags;
		}
		if (__validFields.get(Field_ARCFILESIZE)) {
			other.arcFileSize = this.arcFileSize;
		}
		return other;
	}

	// merge implementation 
	@SuppressWarnings("unchecked")
	public final void merge(ArcFileItem peer) throws CloneNotSupportedException {
		__validFields.or(peer.__validFields);
		if (peer.__validFields.get(Field_URI)) {
			this.uri = (TextBytes) peer.uri.clone();
		}
		if (peer.__validFields.get(Field_HOSTIP)) {
			this.hostIP = (TextBytes) peer.hostIP.clone();
		}
		if (peer.__validFields.get(Field_TIMESTAMP)) {
			this.timestamp = peer.timestamp;
		}
		if (peer.__validFields.get(Field_MIMETYPE)) {
			this.mimeType = (TextBytes) peer.mimeType.clone();
		}
		if (peer.__validFields.get(Field_RECORDLENGTH)) {
			this.recordLength = peer.recordLength;
		}
		{
			//Deep Copy Vector
			int len0 = peer.headerItems.size();
			for (int vidx0 = 0; vidx0 < len0; vidx0++) {
				org.commoncrawl.protocol.shared.ArcFileHeaderItem src0 = peer.headerItems.get(vidx0);
				org.commoncrawl.protocol.shared.ArcFileHeaderItem tgt0;
				tgt0 = (org.commoncrawl.protocol.shared.ArcFileHeaderItem) src0.clone();
				this.headerItems.add(tgt0);
			}
		}
		if (peer.__validFields.get(Field_CONTENT)) {
			this.content = (FlexBuffer) peer.content.clone();
		}
		if (peer.__validFields.get(Field_ARCFILENAME)) {
			this.arcFileName = (TextBytes) peer.arcFileName.clone();
		}
		if (peer.__validFields.get(Field_ARCFILEPOS)) {
			this.arcFilePos = peer.arcFilePos;
		}
		if (peer.__validFields.get(Field_FLAGS)) {
			this.flags = peer.flags;
		}
		if (peer.__validFields.get(Field_ARCFILESIZE)) {
			this.arcFileSize = peer.arcFileSize;
		}
	}

	// hashCode implementation 
	public final int hashCode() {
		int result = 1;
		result = MurmurHash.hash(uri.getBytes(), uri.getOffset(), uri.getLength(), result);
		result = MurmurHash.hash(hostIP.getBytes(), hostIP.getOffset(), hostIP.getLength(), result);
		result = MurmurHash.hashLong(timestamp, result);
		result = MurmurHash.hash(mimeType.getBytes(), mimeType.getOffset(), mimeType.getLength(), result);
		result = MurmurHash.hashInt((int) recordLength, result);
		result = MurmurHash.hashInt(headerItems.hashCode(), result);
		result = MurmurHash.hash(content.get(), content.getOffset(), content.getCount(), result);
		result = MurmurHash.hash(arcFileName.getBytes(), arcFileName.getOffset(), arcFileName.getLength(), result);
		result = MurmurHash.hashInt((int) arcFilePos, result);
		result = MurmurHash.hashInt((int) flags, result);
		result = MurmurHash.hashInt((int) arcFileSize, result);
		return result;
	}
}
